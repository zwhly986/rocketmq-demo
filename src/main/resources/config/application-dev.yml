#server:
#  port: 8080  # 端口号
#  servlet:
#    context-path: /boot001   #项目根路径（前面必须加/）

#spring:
#  datasource:
#    driver-class-name:  com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://127.0.0.1:3306/boot001?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2B8
#    username: root
#    password: root

spring:
  datasource:
    # 数据源基本配置
    username: root
    password: root
    url: jdbc:mysql://127.0.0.1:3306/boot001?autoReconnect=true&autoReconnectForPools=true&useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
    # driver-class需要注意mysql驱动的版本(com.mysql.cj.jdbc.Driver 或 com.mysql.jdbc.Driver)
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    # Druid的其他属性配置
    druid:
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 连接池的最小空闲数量
      min-idle: 5
      # 连接池最大连接数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      min-evictable-idle-time-millis: 30000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validation-query: select 'x'
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      pool-prepared-statements: false
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

      # Druid监控配置，访问url http://127.0.0.1:8080/boot001/druid/
      web-stat-filter:
        # 是否启用StatFilter默认值true
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico

      #StatViewServlet配置，提供监控信息展示的html页面
      stat-view-servlet:
        # 是否启用StatViewServlet默认值true
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台，默认为root
        login-username: druid
        login-password: druid
        # IP白名单
        allow: 127.0.0.1
        # IP黑名单（共同存在时，deny优先于allow）
        deny:

# Mybatis配置
mybatis:
  mapper-locations: classpath:mappers/*.xml #指定Mybatis的Mapper文件
  type-aliases-package: com.jd.boot001.*.entity  #指定Mybatis的实体目录
  configuration:
    log-impl: org.apache.ibatis.logging.log4j2.Log4j2Impl  # 设置MyBatis的日志实现为log4j2

# 日志
logging:
  file:
  # path: /logs/boot001/
  #   name: boot001
  level:
    root: INFO #DEBUG  当前项目的默认日志级别
    com.jd.boot001.mapper: DEBUG   #设置MyBatis的具体日志级别，指定MyBatis Mapper接口所在的包路径
#    path: /boot001/log   #只能指定路径，文件名默认为 spring.log，这里相当于window的 E:\boot001\log\spring.log
#    name: /boot001/log/my.log  #可以指定文件路径和文件名，这里相当于window的 E:\boot001\log\my.log
    #name: my.log  #使用相对路径，这里相当于window的 E:\WorkPlace\IDEA\boot001\my.log

# RocketMQ配置
rocketmq:
  name-server: 192.168.199.151:9876  # RocketMQ地址，根据实际修改
  producer:
    group: orderlyProducerGroup  # 随便给一个默认的生产者组，不填启动项目报错
    # Field rocketMQTemplate in com.jd.boot001.utils.SendOrderlyMessage required a bean of type
    # 'org.apache.rocketmq.spring.core.RocketMQTemplate' that could not be found.



